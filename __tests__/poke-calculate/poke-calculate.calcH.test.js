// Generated by CodiumAI

import { calcH } from "@/app/utils/poke-calculate";

describe("calcH", () => {
  // Returns a number when given valid inputs
  it("should return a number when given valid inputs", () => {
    const base = 100;
    const lv = 50;
    const ev = 0;
    const iv = 31;

    const result = calcH(base, lv, ev, iv);

    expect(typeof result).toBe("number");
  });

  // Returns the correct value for a level 100 Pokemon with 0 EVs and IVs
  it("should return the correct value for a level 100 Pokemon with 0 EVs and IVs", () => {
    const base = 100;
    const lv = 100;
    const ev = 0;
    const iv = 0;

    const result = calcH(base, lv, ev, iv);

    expect(result).toBe(310);
  });

  // Returns the correct value for a level 1 Pokemon with 0 EVs and IVs
  it("should return the correct value for a level 1 Pokemon with 0 EVs and IVs", () => {
    const base = 100;
    const lv = 1;
    const ev = 0;
    const iv = 0;

    const result = calcH(base, lv, ev, iv);

    expect(result).toBe(13);
  });

  // Returns the correct value for a level 100 Pokemon with 252 EVs and IVs
  it("should return the correct value for a level 100 Pokemon with 252 EVs and IVs", () => {
    const base = 100;
    const lv = 100;
    const ev = 252;
    const iv = 31;

    const result = calcH(base, lv, ev, iv);

    expect(result).toBe(404);
  });

  // Returns the correct value for a level 1 Pokemon with 252 EVs and IVs
  it("should return the correct value for a level 1 Pokemon with 252 EVs and IVs", () => {
    const base = 100;
    const lv = 1;
    const ev = 252;
    const iv = 31;

    const result = calcH(base, lv, ev, iv);

    expect(result).toBe(13);
  });

  // Returns the correct value for a level 1 Pokemon with 31 IVs and 252 EVs
  it("should return the correct value for a level 1 Pokemon with 31 IVs and 252 EVs", () => {
    const base = 100;
    const lv = 1;
    const ev = 252;
    const iv = 31;

    const result = calcH(base, lv, ev, iv);

    expect(result).toBe(13);
  });

  it("should return undefined when given invalid inputs", () => {
    const base = "100";
    const lv = 50;
    const ev = 0;
    const iv = 31;

    const result = calcH(base, lv, ev, iv);

    expect(result).toBeUndefined();
  });
});
