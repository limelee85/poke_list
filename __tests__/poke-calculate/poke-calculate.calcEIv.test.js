// Generated by CodiumAI
import { calcEIv } from "@/app/utils/poke-calculate";

describe("calcEIv", () => {
  // Given valid input values, the function should return an object containing a message and stats properties.
  it("should return an object with message and stats properties when given valid input values", () => {
    // Arrange
    const stats = { h: 100, a: 100, b: 100, c: 100, d: 100, s: 100 };
    const base = { h: 80, a: 80, b: 80, c: 80, d: 80, s: 80 };
    const lv = 50;
    const nature = "Adamant";

    // Act
    const result = calcEIv(stats, base, lv, nature);

    console.log(result);

    // Assert
    expect(result).toHaveProperty("message");
    expect(result).toHaveProperty("stats");
  });

  // If the nature parameter is not provided, the function should use the 'serious' nature as default.
  it("should use 'serious' nature as default when nature parameter is not provided", () => {
    // Arrange
    const stats = { h: 100, a: 100, b: 100, c: 100, d: 100, s: 100 };
    const base = { h: 80, a: 80, b: 80, c: 80, d: 80, s: 80 };
    const lv = 50;

    // Act
    const result = calcEIv(stats, base, lv);

    console.log(result);

    // Assert
    expect(result).toHaveProperty("message", "success");
    expect(result).toHaveProperty("stats");
    expect(result.stats).toHaveProperty("h");
    expect(result.stats).toHaveProperty("a");
    expect(result.stats).toHaveProperty("b");
    expect(result.stats).toHaveProperty("c");
    expect(result.stats).toHaveProperty("d");
    expect(result.stats).toHaveProperty("s");
  });

  // If the stats parameter is lower than the minimum possible value, the function should return an object with the iv and ev properties set to 0 and the message property set to 'success'.
  it("should return an object with iv and ev properties set to 0 and message property set to 'success' when stats parameter is lower than the minimum possible value", () => {
    // Arrange
    const stats = { h: 50, a: 50, b: 50, c: 50, d: 50, s: 50 };
    const base = { h: 80, a: 80, b: 80, c: 80, d: 80, s: 80 };
    const lv = 50;
    const nature = "Sassy";

    // Act
    const result = calcEIv(stats, base, lv, nature);

    console.log(result);

    // Assert
    expect(result).toHaveProperty("message", "success");
    expect(result.stats.h).toHaveProperty("iv", 0);
    expect(result.stats.h).toHaveProperty("ev", 0);
  });

  // If the lv parameter is not a number or is less than 1 or greater than 100, the function should return undefined.
  it("should return undefined when lv parameter is not a number", () => {
    // Arrange
    const stats = { h: 100, a: 100, b: 100, c: 100, d: 100, s: 100 };
    const base = { h: 80, a: 80, b: 80, c: 80, d: 80, s: 80 };
    const lv = "50";
    const nature = "adamant";

    // Act
    const result = calcEIv(stats, base, lv, nature);

    // Assert
    expect(result).toBeUndefined();
  });

  // If any of the input values are not numbers, the function should return undefined.
  it("should return undefined when any of the input values are not numbers", () => {
    // Arrange
    const stats = { h: "100", a: 100, b: 100, c: 100, d: 100, s: 100 };
    const base = { h: 80, a: 80, b: 80, c: 80, d: 80, s: 80 };
    const lv = 50;
    const nature = "adamant";

    // Act
    const result = calcEIv(stats, base, lv, nature);

    // Assert
    expect(result).toBeUndefined();
  });

  // undefined
  undefined;
});
