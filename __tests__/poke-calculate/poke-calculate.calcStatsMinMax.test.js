// Generated by CodiumAI
import { calcStatsMinMax } from "@/app/utils/poke-calculate";

describe("calcStatsMinMax", () => {
  // Should use the default nature 'Serious' when no nature is provided
  it('should use the default nature "Serious" when no nature is provided', () => {
    const base = {
      h: 100,
      a: 50,
      b: 75,
      c: 60,
      d: 80,
      s: 70,
    };
    const lv = 50;

    const result = calcStatsMinMax(base, lv);

    expect(result).toEqual({
      h: { min: 160, max: 207 },
      a: { min: 55, max: 102 },
      b: { min: 80, max: 127 },
      c: { min: 65, max: 112 },
      d: { min: 85, max: 132 },
      s: { min: 75, max: 122 },
    });
  });

  // Should use the correct formula to calculate the min and max values for each stat
  it("should use the correct formula to calculate the min and max values for each stat", () => {
    const base = {
      h: 100,
      a: 50,
      b: 75,
      c: 60,
      d: 80,
      s: 70,
    };
    const lv = 50;
    const nature = "Adamant";

    const result = calcStatsMinMax(base, lv, nature);

    expect(result.h.min).toBe(160);
    expect(result.h.max).toBe(207);
    expect(result.a.min).toBe(60);
    expect(result.a.max).toBe(112);
    expect(result.b.min).toBe(80);
    expect(result.b.max).toBe(127);
    expect(result.c.min).toBe(58);
    expect(result.c.max).toBe(100);
    expect(result.d.min).toBe(85);
    expect(result.d.max).toBe(132);
    expect(result.s.min).toBe(75);
    expect(result.s.max).toBe(122);
  });

  // Should return undefined when base parameter is not an object
  it("should return undefined when base parameter is not an object", () => {
    const base = "100";
    const lv = 50;
    const nature = "Adamant";

    const result = calcStatsMinMax(base, lv, nature);

    expect(result).toBeUndefined();
  });

  // Should return undefined when lv parameter is not a number
  it("should return undefined when lv parameter is not a number", () => {
    const base = {
      h: 100,
      a: 50,
      b: 75,
      c: 60,
      d: 80,
      s: 70,
    };
    const lv = "50";
    const nature = "Adamant";

    const result = calcStatsMinMax(base, lv, nature);

    expect(result).toBeUndefined();
  });

  // Should return undefined when nature parameter is not a string
  it("should return undefined when nature parameter is not a string", () => {
    const base = {
      h: 100,
      a: 50,
      b: 75,
      c: 60,
      d: 80,
      s: 70,
    };
    const lv = 50;
    let nature = 2;

    const result = calcStatsMinMax(base, lv, nature);

    expect(result).toEqual({
      h: { min: 160, max: 207 },
      a: { min: 55, max: 102 },
      b: { min: 80, max: 127 },
      c: { min: 65, max: 112 },
      d: { min: 85, max: 132 },
      s: { min: 75, max: 122 },
    });
  });

  // Should handle valid inputs with negative values for base, lv, ev, and iv parameters
  it("base와 lv가 음수인 경우 undefined", () => {
    const base = {
      h: -100,
      a: -50,
      b: -75,
      c: -60,
      d: -80,
      s: -70,
    };
    const lv = -50;
    const nature = "Adamant";

    const result = calcStatsMinMax(base, lv, nature);

    expect(result).toBeUndefined();
  });

  // Should handle valid inputs with the maximum allowed value for lv parameter
  it("should return an object with all stats and their respective min and max values when valid inputs are provided", () => {
    const base = {
      h: 100,
      a: 50,
      b: 75,
      c: 60,
      d: 80,
      s: 70,
    };
    const lv = 100;
    const nature = "Adamant";

    const result = calcStatsMinMax(base, lv, nature);

    expect(result).toEqual({
      h: { min: 310, max: 404 },
      a: { min: 115, max: 218 },
      b: { min: 155, max: 249 },
      c: { min: 112, max: 197 },
      d: { min: 165, max: 259 },
      s: { min: 145, max: 239 },
    });
  });

  // Should handle valid inputs with the minimum allowed value for lv parameter
  it("should return an object with all stats and their respective min and max values when valid inputs are provided", () => {
    const base = {
      h: 1,
      a: 1,
      b: 1,
      c: 1,
      d: 1,
      s: 1,
    };
    const lv = 1;
    const nature = "Adamant";

    const result = calcStatsMinMax(base, lv, nature);

    expect(result).toEqual({
      h: { min: 11, max: 11 },
      a: { min: 5, max: 6 },
      b: { min: 5, max: 5 },
      c: { min: 4, max: 5 },
      d: { min: 5, max: 5 },
      s: { min: 5, max: 5 },
    });
  });

  // Should return undefined when base[b] parameter is not a number
  it("should return undefined when base[b] parameter is not a number", () => {
    const base = {
      h: 100,
      a: "50",
      b: 75,
      c: 60,
      d: 80,
      s: 70,
    };
    const lv = 50;
    const nature = "Adamant";

    const result = calcStatsMinMax(base, lv, nature);

    expect(result).toBeUndefined();
  });

  // Should handle valid inputs with the maximum allowed values for base parameters
  it("should return an object with all stats and their respective min and max values when valid inputs are provided", () => {
    const base = {
      h: 255,
      a: 255,
      b: 255,
      c: 255,
      d: 255,
      s: 255,
    };
    const lv = 100;
    const nature = "Adamant";

    const result = calcStatsMinMax(base, lv, nature);

    expect(result).toEqual({
      h: { min: 620, max: 714 },
      a: { min: 566, max: 669 },
      b: { min: 515, max: 609 },
      c: { min: 463, max: 548 },
      d: { min: 515, max: 609 },
      s: { min: 515, max: 609 },
    });
  });
});
