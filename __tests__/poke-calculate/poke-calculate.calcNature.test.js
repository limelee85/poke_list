// Generated by CodiumAI
import { calcNature } from "@/app/utils/poke-calculate";

describe("calcNature", () => {
  // returns an object with all stats set to 1 if the nature parameter is not provided or is not found in the PokeNaturesIndex object
  it("should return an object with all stats set to 1 when the nature parameter is not provided", () => {
    const result = calcNature();
    expect(result).toEqual({ a: 1, b: 1, c: 1, d: 1, s: 1 });
  });

  // returns an object with all stats set to 1 if the nature parameter is not provided or is not found in the PokeNaturesIndex object
  it("should return an object with all stats set to 1 when the nature parameter is an empty string", () => {
    const result = calcNature("");
    expect(result).toEqual({ a: 1, b: 1, c: 1, d: 1, s: 1 });
  });

  // returns an object with all stats set to 1 if the nature parameter is not provided or is not found in the PokeNaturesIndex object
  it("should return an object with all stats set to 1 when the nature parameter is null", () => {
    const result = calcNature(null);
    expect(result).toEqual({ a: 1, b: 1, c: 1, d: 1, s: 1 });
  });

  // returns an object with all stats set to 1 if the nature parameter is not provided or is not found in the PokeNaturesIndex object
  it("should return an object with all stats set to 1 when the nature parameter is a number", () => {
    const result = calcNature(123);
    expect(result).toEqual({ a: 1, b: 1, c: 1, d: 1, s: 1 });
  });

  // returns an object with all stats set to 1 if the nature parameter is not provided or is not found in the PokeNaturesIndex object
  it("should return an object with all stats set to 1 when the nature parameter is a boolean", () => {
    const result = calcNature(true);
    expect(result).toEqual({ a: 1, b: 1, c: 1, d: 1, s: 1 });
  });

  // returns an object with all stats set to 1 if the nature parameter is not provided or is not found in the PokeNaturesIndex object
  it("should return an object with all stats set to 1 when the nature parameter is an object", () => {
    const result = calcNature({});
    expect(result).toEqual({ a: 1, b: 1, c: 1, d: 1, s: 1 });
  });

  it('nature: "Hardy" should return an object with all stats set to 1', () => {
    const result = calcNature("Hardy");
    expect(result).toEqual({ a: 1, b: 1, c: 1, d: 1, s: 1 });
  });

  it('nature: "Lonely" should return an object with +Atk, -Def', () => {
    const result = calcNature("Lonely");
    expect(result).toEqual({ a: 1.1, b: 0.9, c: 1, d: 1, s: 1 });
  });

  it('nature: "Adamant" should return an object with +Atk, -SpA', () => {
    const result = calcNature("Adamant");
    expect(result).toEqual({ a: 1.1, b: 1, c: 0.9, d: 1, s: 1 });
  });

  it('nature: "Naughty" should return an object with +Atk, -SpD', () => {
    const result = calcNature("Naughty");
    expect(result).toEqual({ a: 1.1, b: 1, c: 1, d: 0.9, s: 1 });
  });

  it('nature: "Brave" should return an object with +Atk, -Spe', () => {
    const result = calcNature("Brave");
    expect(result).toEqual({ a: 1.1, b: 1, c: 1, d: 1, s: 0.9 });
  });

  it('nature: "Bold" should return an object with +Def, -Atk', () => {
    const result = calcNature("Bold");
    expect(result).toEqual({ a: 0.9, b: 1.1, c: 1, d: 1, s: 1 });
  });

  it('nature: "Docile" should return an object with all stats set to 1', () => {
    const result = calcNature("Docile");
    expect(result).toEqual({ a: 1, b: 1, c: 1, d: 1, s: 1 });
  });

  it('nature: "Impish" should return an object with +Def, -SpA', () => {
    const result = calcNature("Impish");
    expect(result).toEqual({ a: 1, b: 1.1, c: 0.9, d: 1, s: 1 });
  });

  it('nature: "Lax" should return an object with +Def, -SpD', () => {
    const result = calcNature("Lax");
    expect(result).toEqual({ a: 1, b: 1.1, c: 1, d: 0.9, s: 1 });
  });

  it('nature: "Relaxed" should return an object with +Def, -Spe', () => {
    const result = calcNature("Relaxed");
    expect(result).toEqual({ a: 1, b: 1.1, c: 1, d: 1, s: 0.9 });
  });

  it('nature: "Modest" should return an object with +SpA, -Atk', () => {
    const result = calcNature("Modest");
    expect(result).toEqual({ a: 0.9, b: 1, c: 1.1, d: 1, s: 1 });
  });

  it('nature: "Mild" should return an object with +SpA, -Def', () => {
    const result = calcNature("Mild");
    expect(result).toEqual({ a: 1, b: 0.9, c: 1.1, d: 1, s: 1 });
  });

  it('nature: "Bashful" should return an object with all stats set to 1', () => {
    const result = calcNature("Bashful");
    expect(result).toEqual({ a: 1, b: 1, c: 1, d: 1, s: 1 });
  });

  it('nature: "Rash" should return an object with +SpA, -SpD', () => {
    const result = calcNature("Rash");
    expect(result).toEqual({ a: 1, b: 1, c: 1.1, d: 0.9, s: 1 });
  });

  it('nature: "Quiet" should return an object with +SpA, -Spe', () => {
    const result = calcNature("Quiet");
    expect(result).toEqual({ a: 1, b: 1, c: 1.1, d: 1, s: 0.9 });
  });

  it('nature: "Calm" should return an object with +SpD, -Atk', () => {
    const result = calcNature("Calm");
    expect(result).toEqual({ a: 0.9, b: 1, c: 1, d: 1.1, s: 1 });
  });

  it('nature: "Gentle" should return an object with +SpD, -Def', () => {
    const result = calcNature("Gentle");
    expect(result).toEqual({ a: 1, b: 0.9, c: 1, d: 1.1, s: 1 });
  });

  it('nature: "Careful" should return an object with +SpD, -SpA', () => {
    const result = calcNature("Careful");
    expect(result).toEqual({ a: 1, b: 1, c: 0.9, d: 1.1, s: 1 });
  });

  it('nature: "Quirky" should return an object with all stats set to 1', () => {
    const result = calcNature("Quirky");
    expect(result).toEqual({ a: 1, b: 1, c: 1, d: 1, s: 1 });
  });

  it('nature: "Sassy" should return an object with +SpD, -Spe', () => {
    const result = calcNature("Sassy");
    expect(result).toEqual({ a: 1, b: 1, c: 1, d: 1.1, s: 0.9 });
  });

  it('nature: "Timid" should return an object with +Spe, -Atk', () => {
    const result = calcNature("Timid");
    expect(result).toEqual({ a: 0.9, b: 1, c: 1, d: 1, s: 1.1 });
  });

  it('nature: "Hasty" should return an object with +Spe, -Def', () => {
    const result = calcNature("Hasty");
    expect(result).toEqual({ a: 1, b: 0.9, c: 1, d: 1, s: 1.1 });
  });

  it('nature: "Jolly" should return an object with +Spe, -SpA', () => {
    const result = calcNature("Jolly");
    expect(result).toEqual({ a: 1, b: 1, c: 0.9, d: 1, s: 1.1 });
  });

  it('nature: "Naive" should return an object with +Spe, -SpD', () => {
    const result = calcNature("Naive");
    expect(result).toEqual({ a: 1, b: 1, c: 1, d: 0.9, s: 1.1 });
  });

  it('nature: "Serious" should return an object with all stats set to 1', () => {
    const result = calcNature("Serious");
    expect(result).toEqual({ a: 1, b: 1, c: 1, d: 1, s: 1 });
  });
});
